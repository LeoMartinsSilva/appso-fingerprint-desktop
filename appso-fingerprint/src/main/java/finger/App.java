/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package finger;

import java.awt.AWTException;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.PopupMenu;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.EnumSet;

import javax.servlet.DispatcherType;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.FilterHolder;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.servlets.CrossOriginFilter;
import org.glassfish.jersey.server.ResourceConfig;
import org.glassfish.jersey.servlet.ServletContainer;

public class App {
    public static void main(String[] args) throws Exception{
        int port = 9000;
        String contextPath = "/";
        Server server = new Server(port);
        ServletContextHandler servletContextHandler = new ServletContextHandler(server, contextPath);
        
        ResourceConfig resourceConfig = new ResourceConfig();
        resourceConfig.packages("appso.fingerprint.resources");
        
        ServletContainer servletContainer = new ServletContainer(resourceConfig);
        ServletHolder servletHolder = new ServletHolder(servletContainer);
        servletContextHandler.addServlet(servletHolder, "/*");

        FilterHolder corsFilterHolder = servletContextHandler.addFilter(CrossOriginFilter.class, "/*", EnumSet.of(DispatcherType.REQUEST));
        corsFilterHolder.setInitParameter(CrossOriginFilter.ALLOWED_ORIGINS_PARAM, "*");
        corsFilterHolder.setInitParameter(CrossOriginFilter.ALLOWED_METHODS_PARAM, "GET,POST,PUT,DELETE,OPTIONS");
        corsFilterHolder.setInitParameter(CrossOriginFilter.ALLOWED_HEADERS_PARAM, "Content-Type");
        corsFilterHolder.setInitParameter(CrossOriginFilter.CHAIN_PREFLIGHT_PARAM, "false");
        
        server.setHandler(servletContextHandler);
        
        server.start();
        
        if (SystemTray.isSupported()) {
            // Obtém a instância do SystemTray
            SystemTray systemTray = SystemTray.getSystemTray();

            // Carrega uma imagem para o ícone
            Image image = Toolkit.getDefaultToolkit().getImage("C:\\Users\\bruna\\Desktop\\tsa\\finger\\appso-fingerprint\\img\\ico.png");

            // Cria um objeto PopupMenu para o ícone
            PopupMenu popupMenu = new PopupMenu();
            
            // Cria um item de menu para fechar o programa
            MenuItem closeItem = new MenuItem("Fechar");
            closeItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                	try {
						server.stop();
					} catch (Exception e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
                    System.exit(0); // Fecha o programa
                }
            });
            popupMenu.add(closeItem);

            // Cria um objeto TrayIcon com a imagem e o PopupMenu
            TrayIcon trayIcon = new TrayIcon(image, "Appso-fingerprint", popupMenu);
            trayIcon.setImageAutoSize(true);

            try {
                // Adiciona o TrayIcon à bandeja do sistema
                systemTray.add(trayIcon);
            } catch (AWTException e) {
                System.err.println("Erro ao adicionar o ícone na bandeja do sistema.");
            }
        } else {
        	System.out.println("Pressione Enter para parar o servidor...");
            System.in.read();

            server.stop();
        }
        
        
        
        
        server.join();
    }
}
